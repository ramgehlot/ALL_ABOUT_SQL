

1-tier DBMS architecture
2-tier DBMS architecture (Application layer)
3-tier DBMS architecture (GUI Layer & Application layer)

Primary key is a candidate key that is most appropriate to become the main key for any table. It is a key that can uniquely identify each record in a table.

Super Key is defined as a set of attributes within a table that can uniquely identify each record within a table. Super Key is a superset of Candidate key.

Candidate keys are defined as the minimal set of fields which can uniquely identify each record in a table. It is an attribute or a set of attributes that can act as a Primary Key for a table to uniquely identify each record in that table.

Secondary or Alternative key : The candidate key which are not selected as primary key are known as secondary keys or alternative keys.

Normalization of Database
Database Normalization is a technique of organizing the data in the database. Normalization is a systematic approach of decomposing tables to eliminate data redundancy(repetition) and undesirable characteristics like Insertion, Update and Deletion Anomalies. 
It is a multi-step process that puts data into tabular form, removing duplicated data from the relation tables.

Normalization is used for mainly two purposes :
Eliminating redundant(useless) data.
Ensuring data dependencies make sense i.e data is logically stored.

Normalization Rule : Normalization rules are divided into the following normal forms:
First Normal Form : Single Valued Attributes(Atomic values),Attribute Domain should not change, Unique name for Attributes/Columns, Order doesn't matters
Second Normal Form : First Normal Form + Partial Dependency
Third Normal Form : Second Normal Form + Transitive Dependency
BCNF (Boyce and Codd Normal Form) : Third Normal Form + And, for any dependency A → B, A should be a super key.
Fourth Normal Form : Boyce-Codd Normal Form + Multi-valued Dependency.

================================================================================================================================================================================
Basic Concepts of ER Model in DBMS
Database models, Entity-relationship model is a model used for design and representation of relationships between data.

=Entity and Entity Set

=ER Model: Attributes
Simple attribute
Composite attribute
Derived attribute
Single-valued attribute
Multi-valued attribute

=ER Model: Keys
Super Key
Candidate Key
Primary Key

=ER Model: Relationships : Binary relationship, Ternary relationship..

==========================Relational database=============================================================================================================================
Relational database is a collection of organized set of tables related to each other, and from which data can be accessed easily.
A table is a collection of data elements organised in terms of rows and columns. A table is also considered as a convenient representation of relations.
A single entry in a table is called a Tuple or Record or Row. A tuple in a table represents a set of related data. 
When an attribute is defined in a relation(table), it is defined to hold only a certain type of values, which is known as Attribute Domain.
A relation schema describes the structure of the relation, with the name of the relation(name of table), its attributes and their names and type.
A relation key is an attribute which can uniquely identify a particular tuple(row) in a relation(table).
Relational Integrity Constraints=The three main Integrity Constraints are:
1.Key Constraints : The Key Constraint specifies that there should be such an attribute(column) in a relation(table), which can be used to fetch data for any tuple(row).
  The Key attribute should never be NULL or same for two different row of data.
2.Domain Constraints : Domain constraints refers to the rules defined for the values that can be stored for a certain attribute.
3.Referential integrity Constraints : If a table reference to some data from another table, then that table and that data should be present for referential integrity constraint to hold true.
=========================Relational Algebra===================================================================================================================================
Relational Algebra :Relational Algebra is a procedural query language used to query the database tables to access data in different ways.
The primary operations that we can perform using relational algebra are:
Select
Project
Union
Set Different
Cartesian product
Rename

Select Operation (σ) : Syntax: σp(r)
Where, σ represents the Select Predicate, r is the name of relation(table name in which you want to look for data), and p is the prepositional logic,  where we specify the conditions that must be satisfied by the data. 
In prepositional logic, one can use unary and binary operators like =, <, > etc, to specify the conditions.
Example : 
σage > 17 (Student), σage > 17 and gender = 'Male' (Student)

Project Operation (∏) : Syntax: ∏A1, A2...(r)
Project operation is used to project only a certain set of attributes of a relation. In simple words, If you want to see only the names all of the students in the Student table, then you can use Project Operation.
∏Name, Age(Student)

Union Operation (∪) : Syntax: A ∪ B
This operation is used to fetch data from two relations(tables) or temporary relation(result of another operation).
∏Student(RegularClass) ∪ ∏Student(ExtraClass)
Above operation will give us name of Students who are attending both regular classes and extra classes, eliminating repetition.

Set Difference (-) : Syntax: A - B
This operation is used to find data present in one relation and not present in the second relation.
 if we want to find name of students who attend the regular class but not the extra class, then, we can use the below operation:
∏Student(RegularClass) - ∏Student(ExtraClass)

Cartesian Product (X) :Syntax: A X B
This is used to combine data from two different relations(tables) into one and fetch data from the combined relation.
if we want to find the information for Regular Class and Extra Class which are conducted during morning, then, we can use the following operation:
σtime = 'morning' (RegularClass X ExtraClass)

Rename Operation (ρ) : Syntax: ρ(RelationNew, RelationOld) 
This operation is used to rename the output relation for any query operation which returns result like Select, Project etc. 

=================================================================================================================================================================================



